openapi: 3.0.3
info:
  title: Torrus API
  version: 0.1.0
  description: |
    API for managing and monitoring downloads.

    - All API routes are served under `/v1` (except `/healthz`)
    - Request bodies are **strict JSON** (unknown fields rejected)
    - Request body max size ~1 MiB
    - `Content-Type` must be `application/json`

servers:
  - url: http://localhost:9090
    description: Local development

security:
  - ApiTokenAuth: []

tags:
  - name: Downloads
    description: Manage downloads

paths:
  /v1/downloads:
    get:
      tags: [Downloads]
      summary: List downloads
      operationId: listDownloads
      parameters:
        - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          description: A list of downloads
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Downloads"
        "500":
          $ref: "#/components/responses/PlainError"
    post:
      tags: [Downloads]
      summary: Create a download
      operationId: createDownload
      parameters:
        - $ref: '#/components/parameters/RequestID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadCreate"
            examples:
              createMagnet:
                value:
                  source: "magnet:?xt=urn:btih:abcdef1234567890..."
                  targetPath: "/movies/"
      responses:
        "201":
          description: Download created (first time)
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Download"
        "200":
          description: Existing download returned (idempotent hit)
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Download"
        "400":
          $ref: "#/components/responses/PlainError"
        "413":
          $ref: "#/components/responses/PlainError"
        "415":
          $ref: "#/components/responses/PlainError"
        "500":
          $ref: "#/components/responses/PlainError"

  /v1/downloads/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Download identifier
        schema:
          type: string
          format: uuid
    get:
      tags: [Downloads]
      summary: Get a download
      operationId: getDownload
      parameters:
        - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          description: Download
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Download"
        "404":
          $ref: "#/components/responses/PlainError"
        "500":
          $ref: "#/components/responses/PlainError"
    patch:
      tags: [Downloads]
      summary: Update desired status for a download
      operationId: patchDownload
      parameters:
        - $ref: '#/components/parameters/RequestID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DownloadPatch"
            examples:
              pause:
                value: { desiredStatus: "Paused" }
              cancel:
                value: { desiredStatus: "Cancelled" }
              resume:
                value: { desiredStatus: "Active" }
      responses:
        "200":
          description: Updated download
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Download"
        "400":
          $ref: "#/components/responses/PlainError"
        "404":
          $ref: "#/components/responses/PlainError"
        "409":
          description: Conflict due to existing target file
          content:
            text/plain:
              schema:
                type: string
                example: "Conflict: target file exists"
        "415":
          $ref: "#/components/responses/PlainError"
        "500":
          $ref: "#/components/responses/PlainError"
    delete:
      tags: [Downloads]
      summary: Delete a download (optionally remove files)
      operationId: deleteDownload
      parameters:
        - $ref: '#/components/parameters/RequestID'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                deleteFiles:
                  type: boolean
                  description: |
                    If true, remove on-disk files and control artifacts (e.g. .aria2) before deleting the entry.
                    If false, only cancel/stop and delete the entry; files are left in place.
                  default: false
      responses:
        "204":
          description: Deleted
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
        "404":
          $ref: "#/components/responses/PlainError"
        "409":
          $ref: "#/components/responses/PlainError"
        "500":
          $ref: "#/components/responses/PlainError"

  /healthz:
    get:
      summary: Health check
      operationId: healthz
      security: []
      parameters:
        - $ref: '#/components/parameters/RequestID'
      responses:
        "200":
          description: Service is healthy
          headers:
            X-Request-ID:
              $ref: '#/components/headers/RequestID'
          content:
            text/plain:
              schema:
                type: string
                example: ok

components:
  responses:
    PlainError:
      description: Error (plain text)
      content:
        text/plain:
          schema:
            type: string
            example: "Not Found"
      headers:
        X-Request-ID:
          $ref: '#/components/headers/RequestID'

  schemas:
    Downloads:
      type: array
      items:
        $ref: "#/components/schemas/Download"

    Download:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          example: "2a1f8d7e-3b4c-4d5e-8f9a-1b2c3d4e5f60"
        gid:
          type: string
          nullable: true
          readOnly: true
          description: Unique identifier for the download in the backend
          example: "2089b05ecca3d829"
        source:
          type: string
          description: Download source link (e.g. magnet URI, HTTP URL)
          example: "magnet:?xt=urn:btih:1300da4907fcec1470bb3cd31563bb401cd33c14..."
        targetPath:
          type: string
          description: Absolute or configured destination path
          example: "/movies/"
        name:
          type: string
          description: Human-friendly display name provided by downloader
          readOnly: true
          example: "Some.Movie.2024.1080p.mkv"
        files:
          type: array
          description: Read-only list of files in this download (when available)
          items:
            $ref: "#/components/schemas/DownloadFile"
          readOnly: true
        status:
          $ref: "#/components/schemas/DownloadStatus"
          readOnly: true
        desiredStatus:
          $ref: "#/components/schemas/DownloadStatus"
        createdAt:
          type: string
          format: date-time
          readOnly: true
          example: "2025-08-22T12:34:56Z"
      required:
        - id
        - source
        - targetPath
        - status
        - createdAt

    DownloadCreate:
      type: object
      additionalProperties: false
      properties:
        source:
          type: string
          description: Download source link (e.g. magnet URI, HTTP URL)
          example: "magnet:?xt=urn:btih:a216611be5b8d8c6306748d132774aa514977ee8..."
        targetPath:
          type: string
          description: Destination directory or path
          example: "/tv/"
      required:
        - source
        - targetPath

    DownloadPatch:
      type: object
      additionalProperties: false
      properties:
        desiredStatus:
          type: string
          description: Desired state of the download
          enum: ["Active", "Resume", "Paused", "Cancelled"]
      required:
        - desiredStatus

    DownloadFile:
      type: object
      additionalProperties: false
      properties:
        path:
          type: string
          description: Relative path or filename
          example: "Show.S01/E01.mkv"
        length:
          type: integer
          format: int64
          description: File size in bytes (if known)
          example: 1048576
        completed:
          type: integer
          format: int64
          description: Bytes completed for this file (if known)
          example: 524288

    DownloadStatus:
      type: string
      description: Current/desired download status.
      enum: ["Queued", "Active", "Paused", "Complete", "Cancelled", "Failed"]
      example: "Queued"

  securitySchemes:
    ApiTokenAuth:
      type: http
      scheme: bearer
      bearerFormat: API token
  parameters:
    RequestID:
      name: X-Request-ID
      in: header
      required: false
      description: Client-provided correlation ID. If absent, server generates one. Always echoed in response.
      schema:
        type: string
  headers:
    RequestID:
      description: Correlation ID for this request.
      schema:
        type: string
